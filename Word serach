#include <vector>
#include <string>
using namespace std;

class Solution 
{
public:
    bool exist(vector<vector<char>>& board, string word) 
    {
       if(word.empty()) return true;
       int m=board.size();
       int n=board[0].size();
       vector< vector<bool>>visited(m,vector<bool>(n,false));
       for(int i=0;i<m;i++)
       {
          for(int j=0;j<n;j++)
          {
             if(backtrack(board , word ,visited ,  i , j, 0))
             {
                 return true;
             }
          }
       } 
       return false;
    }

    bool backtrack(vector<vector<char>>& board, string& word, vector<vector<bool>>& visited, int i, int j, int k) 
    {
       if(k==word.size()) return true;
       if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || visited[i][j] || board[i][j]!=word[k])
       {
         return false;
       }
       visited[i][j]=true;
       if(backtrack(board , word , visited , i , j+1 , k+1) || backtrack(board , word , visited , i , j-1 , k+1)
         || backtrack(board , word , visited , i+1 , j , k+1) || backtrack(board , word , visited , i-1 , j , k+1))
         {
             return true;
         }
         visited[i][j]=false;
         return false;
    }
};
