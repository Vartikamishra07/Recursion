1. Brute approach (for loop)

#include<bits/stdc++.h>
using namespace std;
double myPow(double x, int n) {
      double ans = 1.0;
      for (int i = 0; i < n; i++) {
        ans = ans * x;
      }
      return ans;
}

2. Using while loop(better approach)

class Solution 
{
public:
    double myPow(double x, int n) 
    {
       double ans=1;
       long long nn=n;
       if(nn<0) nn=nn*(-1);
       while(nn)
       {
         if(nn%2!=0) //odd
         {
            ans=ans*x;
            nn=nn-1;
         }
         else //even
         {
             x=x*x;
             nn=nn/2;
         }
       }
       if(n<0) ans=double(1)/double(ans);
       return ans;
    }
};


3. Using recusrion(O(logn) time complexity)

double pow(double x, int n) {
    if (n == 0) {
        return 1;
    }
    if (n == 1) {
        return x;
    }
    if (n < 0) {
        return 1 / pow(x, -n);
    }
    
    double half = pow(x, n / 2);
    if (n % 2 == 0) {
        return half * half;
    } else {
        return x * half * half;
    }
}


